#include <ESP8266WiFi.h>          // WiFi 통신용 라이브러리
#include <Firebase_ESP_Client.h>  // Firebase 통신용 라이브러리
#include <addons/RTDBHelper.h>    // Firebase의 Realtime Database에 대한 정보처리 라이브러리
#include <SimpleDHT.h>            // DHT 센서 라이브러리

#define WIFI_SSID "Galaxy Buds2 (2F62)"    // 우리집 WiFi 이름
#define WIFI_PASSWORD "ALOHOMORA*0"  // 우리집 WiFi 비밀번호
#define DATABASE_URL "fir-8e554-default-rtdb.firebaseio.com" // RTDB의 URL
#define DATABASE_SECRET "cwERpWWumzGtZ1kbDWmlbalvlAxtfXwY3uoiMpeu"    // RTDB의 비밀번호

#define RELAY_PIN D1   // 릴레이 모듈 핀 정의
#define LED_PIN   D10  // LED 핀 정의
#define DHT_PIN   D4   // DHT 센서 핀
#define FLAME_SENSOR_PIN D5  // 불꽃 감지 센서 핀

SimpleDHT11 dht11(DHT_PIN);  // DHT11 객체
FirebaseData fbdo;  // Firebase 데이터 객체
FirebaseAuth auth;  // Firebase 인증용 객체
FirebaseConfig config;  // Firebase 설정용 객체
unsigned long dataMillis = 0;  // 데이터 업로드 간격
int flameSensorValue;  // 불꽃 감지 센서 상태값
int relayControlValue = 0; // 릴레이 제어 변수

void setup() {
  pinMode(LED_PIN, OUTPUT); 
  pinMode(RELAY_PIN, OUTPUT); 
  pinMode(FLAME_SENSOR_PIN, INPUT);  // 불꽃 감지 센서 입력 모드 설정
  digitalWrite(RELAY_PIN, LOW);  // 릴레이 초기 상태 끄기

  Serial.begin(115200);
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);   // WiFi 접속 시작
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");  delay(1000);
  }
  Serial.println();
  Serial.print("Connected with IP: ");
  Serial.println(WiFi.localIP());     // 로컬 IP주소 확인
  Serial.printf("Firebase Client v%s\n\n", FIREBASE_CLIENT_VERSION);  // 클라이언트 버전확인
  config.database_url = DATABASE_URL;  // RTDB의 URL 적용
  config.signer.tokens.legacy_token = DATABASE_SECRET;  // RTDB의 비밀번호 적용
  Firebase.reconnectWiFi(true);  // Firebase 재접속 허용
  Firebase.begin(&config, &auth);  // Firebase 시작
  delay(1000);
}

void loop() {
  if (millis() - dataMillis > 3000) {  // 3초 간격으로 실행
    dataMillis = millis();  // 시간 타이머 업데이트

    /***** 불꽃 감지 센서 값 읽기 및 Firebase에 전송 *****/
    flameSensorValue = digitalRead(FLAME_SENSOR_PIN);  // 불꽃 감지 센서 값 읽기
    if (flameSensorValue == LOW) {  // 불꽃 감지 시 LOW 출력
      Serial.println("Flame detected!");
      digitalWrite(LED_PIN, HIGH);  // 불꽃 감지 시 LED 켜기
      if(Firebase.RTDB.setInt(&fbdo, "/FlameDetected", 1) == true)  // Firebase에 1 전송
        Serial.println("Flame status set to 1");
      else 
        Serial.println(fbdo.errorReason().c_str());
    } else {
      digitalWrite(LED_PIN, LOW);  // 불꽃이 없으면 LED 끄기
      if(Firebase.RTDB.setInt(&fbdo, "/FlameDetected", 0) == true)  // Firebase에 0 전송
        Serial.println("Flame status set to 0");
      else 
        Serial.println(fbdo.errorReason().c_str());
    }

    /***** 온도 값 읽기 및 Firebase에 전송 *****/
    byte temperature = 0; byte humidity = 0; int err = SimpleDHTErrSuccess;
    if ((err = dht11.read(&temperature, &humidity, NULL)) != SimpleDHTErrSuccess) {
      Serial.print("Read DHT11 failed"); return;
    }
    // Firebase에 온도 값을 전송
    if(Firebase.RTDB.setInt(&fbdo, "/Temperature", temperature) == true)
      Serial.println("Temperature set ok");
    else 
      Serial.println(fbdo.errorReason().c_str());

    /***** 앱 인벤터에서 릴레이 제어값 받아서 처리 *****/
    if (Firebase.RTDB.getInt(&fbdo, "/RelayControl") == true) {  // Firebase에서 릴레이 제어값 읽기
      relayControlValue = fbdo.intData();
      if (relayControlValue == 1) {  // 앱 인벤터에서 릴레이 제어값이 1이면 LED 끄기
        digitalWrite(RELAY_PIN, HIGH);  // 릴레이 작동하여 LED 끄기
        Serial.println("Relay ON (LED OFF)");
      } else {
        digitalWrite(RELAY_PIN, LOW);  // 릴레이 해제
        Serial.println("Relay OFF (LED ON)");
      }
    } else {
      Serial.println(fbdo.errorReason().c_str());
    }
  }
}
